--- /usr/src/minix/fs/mfs/const.h	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/fs/mfs/const.h	2019-06-09 23:02:40.000000000 +0200
@@ -44,6 +44,11 @@
 #define DELETE             2 /* tells search_dir to delete entry */
 #define IS_EMPTY           3 /* tells search_dir to ret. OK or ENOTEMPTY */  
 
+#define UNLINK_DEFAULT 0
+#define UNLINK_A 1
+#define UNLINK_B 2
+#define UNLINK_C 3
+
 /* write_map() args */
 #define WMAP_FREE	(1 << 0)
 
--- /usr/src/minix/fs/mfs/inode.c	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/fs/mfs/inode.c	2019-06-09 23:02:40.000000000 +0200
@@ -296,6 +296,7 @@ struct inode *alloc_inode(dev_t dev, mod
 	rip->i_ndzones = sp->s_ndzones;	/* number of direct zones */
 	rip->i_nindirs = sp->s_nindirs;	/* number of indirect zones per blk*/
 	rip->i_sp = sp;			/* pointer to super block */
+    rip->being_removed = 0;
 
 	/* Fields not cleared already are cleared in wipe_inode().  They have
 	 * been put there because truncate() needs to clear the same fields if
--- /usr/src/minix/fs/mfs/inode.h	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/fs/mfs/inode.h	2019-06-09 23:02:40.000000000 +0200
@@ -46,6 +46,7 @@ EXTERN struct inode {
 
   LIST_ENTRY(inode) i_hash;     /* hash list */
   TAILQ_ENTRY(inode) i_unused;  /* free and unused list */
+  int being_removed;
   
 } inode[NR_INODES];
 
--- /usr/src/minix/fs/mfs/link.c	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/fs/mfs/link.c	2019-06-09 23:02:40.000000000 +0200
@@ -106,6 +106,192 @@ int fs_link()
 }
 
 
+int rename_from_dir(ino_t dir_old, char* old_name, ino_t dir_new, char* new_name)
+{
+  struct inode *old_dirp, *old_ip;	/* ptrs to old dir, file inodes */
+  struct inode *new_dirp, *new_ip;	/* ptrs to new dir, file inodes */
+  struct inode *new_superdirp, *next_new_superdirp;
+  int r = OK;				/* error flag; initially no error */
+  int odir, ndir;			/* TRUE iff {old|new} file is dir */
+  int same_pdir;			/* TRUE iff parent dirs are the same */
+  ino_t numb;
+
+  /* Get old dir inode */ 
+  if ((old_dirp = get_inode(fs_dev, dir_old)) == NULL)
+	return(err_code);
+
+  old_ip = advance(old_dirp, old_name, IGN_PERM);
+  r = err_code;
+
+  if (r == EENTERMOUNT || r == ELEAVEMOUNT) {
+	put_inode(old_ip);
+	old_ip = NULL;
+	if (r == EENTERMOUNT) r = EXDEV;	/* should this fail at all? */
+	else if (r == ELEAVEMOUNT) r = EINVAL;	/* rename on dot-dot */
+  }
+
+  if (old_ip == NULL) {
+	put_inode(old_dirp);
+	return(r);
+  }
+
+  /* Get new dir inode */ 
+  if ((new_dirp = get_inode(fs_dev, dir_new)) == NULL){
+        put_inode(old_ip);
+        put_inode(old_dirp);
+        return(err_code);
+  } else {
+	if (new_dirp->i_nlinks == NO_LINK) {	/* Dir does not actually exist */
+  		put_inode(old_ip);
+  		put_inode(old_dirp);
+  		put_inode(new_dirp);
+  		return(ENOENT);
+	}
+  }
+  
+  new_ip = advance(new_dirp, new_name, IGN_PERM); /* not required to exist */
+
+  /* However, if the check failed because the file does exist, don't continue.
+   * Note that ELEAVEMOUNT is covered by the dot-dot check later. */
+  if(err_code == EENTERMOUNT) {
+	put_inode(new_ip);
+	new_ip = NULL;
+	r = EBUSY;
+  }
+
+  odir = ((old_ip->i_mode & I_TYPE) == I_DIRECTORY); /* TRUE iff dir */
+
+  /* If it is ok, check for a variety of possible errors. */
+  if(r == OK) {
+	same_pdir = (old_dirp == new_dirp);
+
+	/* The old inode must not be a superdirectory of the new last dir. */
+	if (odir && !same_pdir) {
+		dup_inode(new_superdirp = new_dirp);
+		while (TRUE) {	/* may hang in a file system loop */
+			if (new_superdirp == old_ip) {
+				put_inode(new_superdirp);
+				r = EINVAL;
+				break;
+			}
+			next_new_superdirp = advance(new_superdirp, dot2,
+						     IGN_PERM);
+
+			put_inode(new_superdirp);
+			if(next_new_superdirp == new_superdirp) {
+				put_inode(new_superdirp);
+				break;	
+			}
+			if(err_code == ELEAVEMOUNT) {
+				/* imitate that we are back at the root,
+				 * cross device checked already on VFS */
+				put_inode(next_new_superdirp);
+				err_code = OK;
+				break;
+			}
+			new_superdirp = next_new_superdirp;
+			if(new_superdirp == NULL) {
+				/* Missing ".." entry.  Assume the worst. */
+				r = EINVAL;
+				break;
+			}
+		} 	
+	}	
+	  
+	/* The old or new name must not be . or .. */
+	if(strcmp(old_name, ".") == 0 || strcmp(old_name, "..") == 0 ||
+	   strcmp(new_name, ".") == 0 || strcmp(new_name, "..") == 0) {
+		r = EINVAL;
+	}
+	/* Both parent directories must be on the same device. 
+	if(old_dirp->i_dev != new_dirp->i_dev) r = EXDEV; */
+
+	/* Some tests apply only if the new path exists. */
+	if(new_ip == NULL) {
+		/* don't rename a file with a file system mounted on it. 
+		if (old_ip->i_dev != old_dirp->i_dev) r = EXDEV;*/
+		if (odir && new_dirp->i_nlinks >= LINK_MAX &&
+		    !same_pdir && r == OK) { 
+			r = EMLINK;
+		}
+	} else {
+		if(old_ip == new_ip) {
+            r = SAME; /* old=new */
+            new_ip -> being_removed = 0;
+        }
+		
+		ndir = ((new_ip->i_mode & I_TYPE) == I_DIRECTORY);/* dir ? */
+		if(odir == TRUE && ndir == FALSE) r = ENOTDIR;
+		if(odir == FALSE && ndir == TRUE) r = EISDIR;
+	}
+  }
+  
+  /* If a process has another root directory than the system root, we might
+   * "accidently" be moving it's working directory to a place where it's
+   * root directory isn't a super directory of it anymore. This can make
+   * the function chroot useless. If chroot will be used often we should
+   * probably check for it here. */
+
+  /* The rename will probably work. Only two things can go wrong now:
+   * 1. being unable to remove the new file. (when new file already exists)
+   * 2. being unable to make the new directory entry. (new file doesn't exists)
+   *     [directory has to grow by one block and cannot because the disk
+   *      is completely full].
+   */
+  if(r == OK) {
+	if(new_ip != NULL) {
+		/* There is already an entry for 'new'. Try to remove it. */
+		if(odir) 
+			r = remove_dir(new_dirp, new_ip, new_name);
+		else 
+			r = unlink_file(new_dirp, new_ip, new_name);
+	}
+	/* if r is OK, the rename will succeed, while there is now an
+	 * unused entry in the new parent directory. */
+  }
+
+  if(r == OK) {
+	  /* If the new name will be in the same parent directory as the old
+	   * one, first remove the old name to free an entry for the new name,
+	   * otherwise first try to create the new name entry to make sure
+	   * the rename will succeed.
+	   */
+	numb = old_ip->i_num;		/* inode number of old file */
+	  
+	if(same_pdir) {
+		r = search_dir(old_dirp, old_name, NULL, DELETE, IGN_PERM);
+						/* shouldn't go wrong. */
+		if(r == OK)
+			(void) search_dir(old_dirp, new_name, &numb, ENTER,
+					  IGN_PERM);
+	} else {
+		r = search_dir(new_dirp, new_name, &numb, ENTER, IGN_PERM);
+		if(r == OK)
+			(void) search_dir(old_dirp, old_name, NULL, DELETE,
+					  IGN_PERM);
+	}
+  }
+  /* If r is OK, the ctime and mtime of old_dirp and new_dirp have been marked
+   * for update in search_dir. */
+
+  if(r == OK && odir && !same_pdir) {
+	/* Update the .. entry in the directory (still points to old_dirp).*/
+	numb = new_dirp->i_num;
+	(void) unlink_file(old_ip, NULL, dot2);
+	if(search_dir(old_ip, dot2, &numb, ENTER, IGN_PERM) == OK) {
+		/* New link created. */
+		new_dirp->i_nlinks++;
+		IN_MARKDIRTY(new_dirp);
+	}
+  }
+
+  /* Release the inodes. */
+  put_inode(old_dirp);
+  put_inode(old_ip);
+  put_inode(new_dirp);
+  put_inode(new_ip);
+  return(r == SAME ? OK : r);
+}
 /*===========================================================================*
  *				fs_unlink				     *
  *===========================================================================*/
@@ -156,7 +342,41 @@ int fs_unlink()
 	  if( (rip->i_mode & I_TYPE) == I_DIRECTORY) r = EPERM;
 
 	  /* Actually try to unlink the file; fails if parent is mode 0 etc. */
-	  if (r == OK) r = unlink_file(rldirp, rip, string);
+	  if (r == OK) {
+          int unlink_mode = get_unlink_mode(rldirp);
+          if (strcmp(string, "A.mode") == 0 || strcmp(string, "B.mode") == 0 || strcmp(string, "C.mode") == 0) {
+              /* Default mode when removing file responsible for rm mode. */
+              unlink_mode = UNLINK_DEFAULT;
+          }
+          char string_new[MFS_NAME_MAX];
+          switch (unlink_mode) {
+              case UNLINK_A:
+                  r = EPERM;
+                  break;
+              case UNLINK_B:
+                  if (!rip->being_removed) {
+                      rip->being_removed = 1;
+                      rip->i_update |= CTIME;
+                      IN_MARKDIRTY(rip);
+                      r = EINPROGRESS;
+                  } else {
+                      r = unlink_file(rldirp, rip, string);
+                  }
+                  break;
+              case UNLINK_C:
+                  strcpy(string_new, string);
+                  strcat(string_new, ".bak");
+                  if (len + 4 > MFS_NAME_MAX) {
+                      r = ENAMETOOLONG;
+                  } else {
+                      rename_from_dir(rldirp->i_num, string, rldirp->i_num, string_new);
+                  }
+                  break;
+              case UNLINK_DEFAULT:
+                  r = unlink_file(rldirp, rip, string);
+                  break;
+          }
+      }
   } else {
 	  r = remove_dir(rldirp, rip, string); /* call is RMDIR */
   }
@@ -284,15 +504,9 @@ char file_name[MFS_NAME_MAX];	/* name of
 int fs_rename()
 {
 /* Perform the rename(name1, name2) system call. */
-  struct inode *old_dirp, *old_ip;	/* ptrs to old dir, file inodes */
-  struct inode *new_dirp, *new_ip;	/* ptrs to new dir, file inodes */
-  struct inode *new_superdirp, *next_new_superdirp;
-  int r = OK;				/* error flag; initially no error */
-  int odir, ndir;			/* TRUE iff {old|new} file is dir */
-  int same_pdir;			/* TRUE iff parent dirs are the same */
   char old_name[MFS_NAME_MAX], new_name[MFS_NAME_MAX];
-  ino_t numb;
   phys_bytes len;
+  int r;
   
   /* Copy the last component of the old name */
   len = min( (unsigned) fs_m_in.m_vfs_fs_rename.len_old, sizeof(old_name));
@@ -308,178 +522,9 @@ int fs_rename()
   if (r != OK) return r;
   NUL(new_name, len, sizeof(new_name));
 
-  /* Get old dir inode */ 
-  if ((old_dirp = get_inode(fs_dev, fs_m_in.m_vfs_fs_rename.dir_old)) == NULL)
-	return(err_code);
-
-  old_ip = advance(old_dirp, old_name, IGN_PERM);
-  r = err_code;
-
-  if (r == EENTERMOUNT || r == ELEAVEMOUNT) {
-	put_inode(old_ip);
-	old_ip = NULL;
-	if (r == EENTERMOUNT) r = EXDEV;	/* should this fail at all? */
-	else if (r == ELEAVEMOUNT) r = EINVAL;	/* rename on dot-dot */
-  }
-
-  if (old_ip == NULL) {
-	put_inode(old_dirp);
-	return(r);
-  }
-
-  /* Get new dir inode */ 
-  if ((new_dirp = get_inode(fs_dev, fs_m_in.m_vfs_fs_rename.dir_new)) == NULL){
-        put_inode(old_ip);
-        put_inode(old_dirp);
-        return(err_code);
-  } else {
-	if (new_dirp->i_nlinks == NO_LINK) {	/* Dir does not actually exist */
-  		put_inode(old_ip);
-  		put_inode(old_dirp);
-  		put_inode(new_dirp);
-  		return(ENOENT);
-	}
-  }
-  
-  new_ip = advance(new_dirp, new_name, IGN_PERM); /* not required to exist */
-
-  /* However, if the check failed because the file does exist, don't continue.
-   * Note that ELEAVEMOUNT is covered by the dot-dot check later. */
-  if(err_code == EENTERMOUNT) {
-	put_inode(new_ip);
-	new_ip = NULL;
-	r = EBUSY;
-  }
-
-  odir = ((old_ip->i_mode & I_TYPE) == I_DIRECTORY); /* TRUE iff dir */
-
-  /* If it is ok, check for a variety of possible errors. */
-  if(r == OK) {
-	same_pdir = (old_dirp == new_dirp);
-
-	/* The old inode must not be a superdirectory of the new last dir. */
-	if (odir && !same_pdir) {
-		dup_inode(new_superdirp = new_dirp);
-		while (TRUE) {	/* may hang in a file system loop */
-			if (new_superdirp == old_ip) {
-				put_inode(new_superdirp);
-				r = EINVAL;
-				break;
-			}
-			next_new_superdirp = advance(new_superdirp, dot2,
-						     IGN_PERM);
-
-			put_inode(new_superdirp);
-			if(next_new_superdirp == new_superdirp) {
-				put_inode(new_superdirp);
-				break;	
-			}
-			if(err_code == ELEAVEMOUNT) {
-				/* imitate that we are back at the root,
-				 * cross device checked already on VFS */
-				put_inode(next_new_superdirp);
-				err_code = OK;
-				break;
-			}
-			new_superdirp = next_new_superdirp;
-			if(new_superdirp == NULL) {
-				/* Missing ".." entry.  Assume the worst. */
-				r = EINVAL;
-				break;
-			}
-		} 	
-	}	
-	  
-	/* The old or new name must not be . or .. */
-	if(strcmp(old_name, ".") == 0 || strcmp(old_name, "..") == 0 ||
-	   strcmp(new_name, ".") == 0 || strcmp(new_name, "..") == 0) {
-		r = EINVAL;
-	}
-	/* Both parent directories must be on the same device. 
-	if(old_dirp->i_dev != new_dirp->i_dev) r = EXDEV; */
-
-	/* Some tests apply only if the new path exists. */
-	if(new_ip == NULL) {
-		/* don't rename a file with a file system mounted on it. 
-		if (old_ip->i_dev != old_dirp->i_dev) r = EXDEV;*/
-		if (odir && new_dirp->i_nlinks >= LINK_MAX &&
-		    !same_pdir && r == OK) { 
-			r = EMLINK;
-		}
-	} else {
-		if(old_ip == new_ip) r = SAME; /* old=new */
-		
-		ndir = ((new_ip->i_mode & I_TYPE) == I_DIRECTORY);/* dir ? */
-		if(odir == TRUE && ndir == FALSE) r = ENOTDIR;
-		if(odir == FALSE && ndir == TRUE) r = EISDIR;
-	}
-  }
-  
-  /* If a process has another root directory than the system root, we might
-   * "accidently" be moving it's working directory to a place where it's
-   * root directory isn't a super directory of it anymore. This can make
-   * the function chroot useless. If chroot will be used often we should
-   * probably check for it here. */
-
-  /* The rename will probably work. Only two things can go wrong now:
-   * 1. being unable to remove the new file. (when new file already exists)
-   * 2. being unable to make the new directory entry. (new file doesn't exists)
-   *     [directory has to grow by one block and cannot because the disk
-   *      is completely full].
-   */
-  if(r == OK) {
-	if(new_ip != NULL) {
-		/* There is already an entry for 'new'. Try to remove it. */
-		if(odir) 
-			r = remove_dir(new_dirp, new_ip, new_name);
-		else 
-			r = unlink_file(new_dirp, new_ip, new_name);
-	}
-	/* if r is OK, the rename will succeed, while there is now an
-	 * unused entry in the new parent directory. */
-  }
-
-  if(r == OK) {
-	  /* If the new name will be in the same parent directory as the old
-	   * one, first remove the old name to free an entry for the new name,
-	   * otherwise first try to create the new name entry to make sure
-	   * the rename will succeed.
-	   */
-	numb = old_ip->i_num;		/* inode number of old file */
-	  
-	if(same_pdir) {
-		r = search_dir(old_dirp, old_name, NULL, DELETE, IGN_PERM);
-						/* shouldn't go wrong. */
-		if(r == OK)
-			(void) search_dir(old_dirp, new_name, &numb, ENTER,
-					  IGN_PERM);
-	} else {
-		r = search_dir(new_dirp, new_name, &numb, ENTER, IGN_PERM);
-		if(r == OK)
-			(void) search_dir(old_dirp, old_name, NULL, DELETE,
-					  IGN_PERM);
-	}
-  }
-  /* If r is OK, the ctime and mtime of old_dirp and new_dirp have been marked
-   * for update in search_dir. */
-
-  if(r == OK && odir && !same_pdir) {
-	/* Update the .. entry in the directory (still points to old_dirp).*/
-	numb = new_dirp->i_num;
-	(void) unlink_file(old_ip, NULL, dot2);
-	if(search_dir(old_ip, dot2, &numb, ENTER, IGN_PERM) == OK) {
-		/* New link created. */
-		new_dirp->i_nlinks++;
-		IN_MARKDIRTY(new_dirp);
-	}
-  }
-	
-  /* Release the inodes. */
-  put_inode(old_dirp);
-  put_inode(old_ip);
-  put_inode(new_dirp);
-  put_inode(new_ip);
-  return(r == SAME ? OK : r);
+  ino_t dir_old = fs_m_in.m_vfs_fs_rename.dir_old;
+  ino_t dir_new = fs_m_in.m_vfs_fs_rename.dir_new;
+  return rename_from_dir(dir_old, old_name, dir_new, new_name);
 }
 
 
--- /usr/src/minix/fs/mfs/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/fs/mfs/proto.h	2019-06-09 23:02:40.000000000 +0200
@@ -105,6 +105,7 @@ void mfs_nul_f(char *file, int line, cha
 	unsigned int maxlen);
 int min(unsigned int l, unsigned int r);
 int no_sys(void);
+int get_unlink_mode(struct inode* dirp);
 void sanitycheck(char *file, int line);
 #define SANITYCHECK sanitycheck(__FILE__, __LINE__)
 
--- /usr/src/minix/fs/mfs/utility.c	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/fs/mfs/utility.c	2019-06-09 23:02:40.000000000 +0200
@@ -92,6 +92,33 @@ unsigned int maxlen)
   }
 }
 
+/*===========================================================================*
+ *				get_unlink_mode			     *
+ *===========================================================================*/
+int get_unlink_mode(struct inode* dirp)
+{
+  register struct inode *mip;
+  int unlink_mode;
+  mip = advance(dirp, "A.mode", IGN_PERM);
+  if ((mip != NULL) && ((mip->i_mode & I_TYPE) == I_REGULAR)) {
+      unlink_mode = UNLINK_A;
+  } else {
+      mip = advance(dirp, "B.mode", IGN_PERM);
+      if ((mip != NULL) && ((mip->i_mode & I_TYPE) == I_REGULAR)) {
+          unlink_mode = UNLINK_B;
+      } else {
+          mip = advance(dirp, "C.mode", IGN_PERM);
+          if ((mip != NULL) && ((mip->i_mode & I_TYPE) == I_REGULAR)) {
+              unlink_mode = UNLINK_C;
+          } else {
+              unlink_mode = UNLINK_DEFAULT;
+          }
+      }
+  }
+  put_inode(mip);
+  return unlink_mode;
+}
+
 #define MYASSERT(c) if(!(c)) { printf("MFS:%s:%d: sanity check: %s failed\n", \
   file, line, #c); panic("sanity check " #c " failed: %d", __LINE__); }
 
