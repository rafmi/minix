--- /usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/include/minix/callnr.h	2019-04-27 22:41:18.000000000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_DISTORT_TIME		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
--- /usr/include/minix/callnr.h	2014-09-14 11:00:44.000000000 +0200
+++ /usr/include/minix/callnr.h	2019-04-30 21:34:11.000000000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_DISTORT_TIME		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
--- /usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/servers/pm/proto.h	2019-04-30 19:17:16.000000000 +0200
@@ -89,3 +89,9 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+int is_child(struct mproc* mp_child, struct mproc* mp_parent);
+int find_proc_ind(pid_t lpid);
+
+
+/* distort_time.c */
+int do_distort_time(void);
--- /usr/src/minix/servers/pm/mproc.h	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/servers/pm/mproc.h	2019-04-30 20:18:31.000000000 +0200
@@ -13,6 +13,18 @@
 /* Needs to be included here, for 'ps' etc */
 #include "const.h"
 
+EXTERN struct dt_proc {
+  /* set by calls to default time functions */
+  int has_baseline;
+  time_t baseline_sec;
+  long baseline_nsec;
+
+  /* set by distort_time */
+  uint8_t scale;
+  int distorted;
+  int old;
+} dt_proc[NR_PROCS];
+
 EXTERN struct mproc {
   char mp_exitstatus;		/* storage for status when process exits */
   char mp_sigstatus;		/* storage for signal # for killed procs */
--- /usr/src/minix/servers/pm/distort_time.c	1970-01-01 01:00:00.000000000 +0100
+++ /usr/src/minix/servers/pm/distort_time.c	2019-05-01 01:38:03.000000000 +0200
@@ -0,0 +1,46 @@
+/* This file takes care of those system calls that deal with distorting time.
+ *
+ * The entry points into this file are
+ *   do_distort_time:		perform the DISTORT_TIME system call
+ */
+
+#include "pm.h"
+#include "stdio.h"
+#include "mproc.h"
+
+/*===========================================================================*
+ *				do_distort_time			     *
+ *===========================================================================*/
+int do_distort_time(void)
+{
+  pid_t caller_pid = mproc[who_p].mp_pid;
+  pid_t target_pid = (pid_t) m_in.m7_i1;
+  uint8_t scale = (uint8_t) m_in.m7_i2;
+  if (caller_pid == target_pid) {
+      errno = EPERM;
+      return errno;
+  }
+
+  struct mproc* crmp = find_proc(caller_pid);
+  struct mproc* trmp = find_proc(target_pid);
+
+  int tind = find_proc_ind(target_pid);
+
+  if (crmp == NULL || trmp == NULL) {
+      errno = EINVAL;
+      return errno;
+  }
+  if (is_child(crmp, trmp)) {
+      dt_proc[tind].scale = scale;
+      dt_proc[tind].distorted = 1;
+      dt_proc[tind].old = 1;
+  } else if (is_child(trmp, crmp)) {
+      dt_proc[tind].scale = scale;
+      dt_proc[tind].distorted = 1;
+      dt_proc[tind].old = 0;
+  } else {
+      errno = EPERM;
+      return errno;
+  }
+  return(OK);
+}
--- /usr/src/minix/servers/pm/forkexit.c	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/servers/pm/forkexit.c	2019-04-30 04:24:21.000000000 +0200
@@ -113,6 +113,11 @@ int do_fork()
   new_pid = get_free_pid();
   rmc->mp_pid = new_pid;	/* assign pid to child */
 
+  /* Set dt_proc table entry */
+  dt_proc[next_child].scale = 1;
+  dt_proc[next_child].has_baseline = 0;
+  dt_proc[next_child].distorted = 0;
+
   memset(&m, 0, sizeof(m));
   m.m_type = VFS_PM_FORK;
   m.VFS_PM_ENDPT = rmc->mp_endpoint;
--- /usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/servers/pm/table.c	2019-04-27 22:57:07.000000000 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_DISTORT_TIME)	= do_distort_time	/* distort_time(2) */
 };
--- /usr/src/minix/servers/pm/time.c	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/servers/pm/time.c	2019-05-01 01:22:04.000000000 +0200
@@ -69,6 +69,10 @@ int do_settime()
 {
   int s;
 
+  for(int i = 0; i < NR_PROCS; i++) {
+      dt_proc[i].has_baseline = 0;
+  }
+
   if (mp->mp_effuid != SUPER_USER) { 
       return(EPERM);
   }
@@ -101,9 +105,39 @@ int do_time()
   if ( (s=getuptime(&ticks, &realtime, &boottime)) != OK)
   	panic("do_time couldn't get uptime: %d", s);
 
+
   mp->mp_reply.m_pm_lc_time.sec = boottime + (realtime / system_hz);
   mp->mp_reply.m_pm_lc_time.nsec =
 	(uint32_t) ((realtime % system_hz) * 1000000000ULL / system_hz);
+
+  
+  if (dt_proc[who_p].distorted) {
+    if (dt_proc[who_p].has_baseline) {
+      time_t baseline_sec = dt_proc[who_p].baseline_sec;
+      long baseline_nsec = dt_proc[who_p].baseline_nsec;
+
+	  time_t sec = mp->mp_reply.m_pm_lc_time.sec;
+	  long nsec = mp->mp_reply.m_pm_lc_time.nsec;
+        if (dt_proc[who_p].old) {
+          time_t add_sec = (sec - baseline_sec + dt_proc[who_p].scale / 2) / dt_proc[who_p].scale;
+          long add_nsec = (nsec - baseline_nsec + dt_proc[who_p].scale / 2) / dt_proc[who_p].scale;
+		  mp->mp_reply.m_pm_lc_time.sec = baseline_sec + add_sec;
+		  mp->mp_reply.m_pm_lc_time.nsec = baseline_nsec + add_nsec;
+          } else {
+	        if (dt_proc[who_p].scale != 0) {
+              mp->mp_reply.m_pm_lc_time.sec = baseline_sec + (sec - baseline_sec) * dt_proc[who_p].scale;
+              mp->mp_reply.m_pm_lc_time.nsec = baseline_nsec + (nsec - baseline_nsec) * dt_proc[who_p].scale;
+            } else {
+		      mp->mp_reply.m_pm_lc_time.sec = baseline_sec;
+		      mp->mp_reply.m_pm_lc_time.nsec = baseline_nsec;
+            }
+          }
+      } else {
+        dt_proc[who_p].has_baseline = 1;
+        dt_proc[who_p].baseline_sec = mp->mp_reply.m_pm_lc_time.sec;
+        dt_proc[who_p].baseline_nsec = mp->mp_reply.m_pm_lc_time.nsec;
+      }
+  }
   return(OK);
 }
 
--- /usr/src/minix/servers/pm/utility.c	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/servers/pm/utility.c	2019-04-30 19:50:21.000000000 +0200
@@ -136,3 +136,38 @@ message *m_ptr;
 
   rmp->mp_flags |= VFS_CALL;
 }
+
+/*===========================================================================*
+ *				is_child			 	     *
+ *===========================================================================*/
+int is_child(struct mproc* mp_child, struct mproc* mp_parent)
+{
+  struct mproc *m_ptr;
+  m_ptr = mp_child;
+  while (m_ptr->mp_pid != INIT_PID)
+  {
+      if (m_ptr->mp_pid == mp_parent->mp_pid) {
+          return 1;
+      }
+      m_ptr = &mproc[m_ptr->mp_parent];
+  }
+  return 0;
+}
+
+/*===========================================================================*
+ *				find_proc_ind			     *
+ *===========================================================================*/
+int find_proc_ind(lpid)
+pid_t lpid;
+{
+  register struct mproc *rmp;
+  int ind = 0;
+
+  for (rmp = &mproc[0]; rmp < &mproc[NR_PROCS]; rmp++) {
+	if ((rmp->mp_flags & IN_USE) && rmp->mp_pid == lpid) {
+        return(ind);
+	}
+    ind = ind + 1;
+  }
+  return(-1);
+}
--- /usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/minix/servers/pm/Makefile	2019-04-27 22:57:33.000000000 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c distort_time.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
--- /usr/include/unistd.h	2014-09-14 11:00:43.000000000 +0200
+++ /usr/include/unistd.h	2019-04-27 23:23:02.000000000 +0200
@@ -413,3 +413,5 @@ extern	 char *suboptarg;	/* getsubopt(3)
 
 __END_DECLS
 #endif /* !_UNISTD_H_ */
+
+int distort_time(pid_t pid, uint8_t scale);
--- /usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/include/unistd.h	2019-04-27 23:23:14.000000000 +0200
@@ -413,3 +413,5 @@ extern	 char *suboptarg;	/* getsubopt(3)
 
 __END_DECLS
 #endif /* !_UNISTD_H_ */
+
+int distort_time(pid_t pid, uint8_t scale);
--- /usr/src/lib/libc/misc/distort_time.c	1970-01-01 01:00:00.000000000 +0100
+++ /usr/src/lib/libc/misc/distort_time.c	2019-04-30 18:57:49.000000000 +0200
@@ -0,0 +1,24 @@
+#include <lib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <minix/rs.h>
+
+int distort_time(pid_t pid, uint8_t scale) {
+    endpoint_t pm_pt;
+    message m;
+    m.m7_i1 = (int) pid;
+    m.m7_i2 = (int) scale;
+
+    if (minix_rs_lookup("pm", &pm_pt) != 0) {
+        errno = ENOSYS;
+        return -1;
+    }
+    int sys_ret = (_syscall(pm_pt, PM_DISTORT_TIME, &m));
+    if (sys_ret == -1) {
+        return errno;
+    } else {
+        return 0;
+    }
+}
--- /usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ /usr/src/lib/libc/misc/Makefile.inc	2019-04-27 23:21:56.000000000 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c distort_time.c
